@import 'colors';
@import 'animations';

/* mirror is the element added while you are dragging. */
.gu-mirror {
  background-color: $drag-shadow;
  cursor: move;
  cursor: grab;
  margin: 10px;
  padding: 10px;
  position: fixed !important;
  transition: opacity 0.4s ease-in-out;
  z-index: 9999 !important;
}
.gu-hide {
  display: none !important;
}
.gu-unselectable {
  user-select: none !important;
}
.gu-transit {
  opacity: 0.2;
  filter: alpha(opacity=20);
}
.gu-mirror {
  opacity: 0.8;
  filter: alpha(opacity=80);
}

/* Custom classes triggered by events (drag, cancel, drop) */
.dragula-drop-area {}
/* Widen the drop area. */
.dragula-drop-area:before {
  bottom: 0;
  content: '';
  left: -30px;
  position: absolute;
  top: 0;
  width: 30px;
}
/* The item while it is being dragged. */
.dragula-item {}
/* Indicate that the re-ordering has not been saved. */
.dragula-not-saved {
  background: $drag-saving !important;
  transition: background-color $standard-time linear;
}

// overlay div on top of iframes
.iframe-overlay-div {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.complex-list-trash {
  align-items: center;
  background: $permanent-placeholder-bg-color;
  bottom: 50px;
  color: $permanent-placeholder-color;
  display: none;
  height: 300px;
  justify-content: center;
  left: 50px;
  position: fixed;
  width: 300px;
  z-index: 9998;
  li {
    /* hide item to be deleted while it's on the trash item */
    display: none;
  }
}

.complex-list-trash .material-icons {
  content: 'delete';
  font-size: 150px;
}

.complex-list-trash.dragula-drop-area .material-icons:not(:only-child) {
  background: $placeholder-error-bg-color;
  color: $placeholder-error-color;
  font-size: 300px;
  height: 100%;
  width: 100%;
}

.complex-list-trash.dragula-drop-area {
  display: flex;
}

.complex-list-trash > .gu-transit {
  display: block;
  max-width: 200px;
  opacity: 0.7;
  filter: alpha(opacity=70);
  position: absolute;
}
