@import 'colors';
@import 'typography';
@import 'layers';

// selector offsets, for the selector outline
$offset-width: 10px;
$offset-width-half: $offset-width / 2;
$offset-height: 30px;
$offset-height-half: $offset-height / 2;
$offset-height-menu: $offset-height-half - 1; // 1px less, so the menu border always displays
$parent-offset: 4px; // how much wider should parent outline be (each side)

// icon sizes
$action-icon-small: 16px;
$action-icon-large: 22px;

// selector colors
$page-color: $blue;
$page-bg-color: $blue-50;
$page-parent-color: $blue-75;
$page-parent-bg-color: $blue-25;

// todo: in the future layout-specific selectors use these colors
$layout-color: $purple;
$layout-bg-color: $purple-50;
$layout-parent-color: $purple-75;
$layout-parent-bg-color: $purple-25;

// mixin for creating the selector icons
@mixin selector-icon($fill, $size) {
  background: none;
  border: none;
  cursor: pointer;
  margin: 0;
  outline: none;
  color: $fill;
  padding: 6px 8px;

  // set icon sizes
  svg {
    width: $size;
    height: $size;
  }

  // set fill color
  svg,
  svg * {
    fill: $fill;
    transition: 150ms fill ease-out;
  }

  // subtle hover state
  &:hover svg,
  &:hover svg * {
    fill: darken($fill, 5%);
    transition: 150ms fill ease-out;
  }

  // subtle active state
  &:active svg,
  &:active svg * {
    fill: darken($fill, 10%);
    transition: 50ms fill ease-out;
  }

  // note: hover and active states are different than our regular outlined buttons,
  // since the border-radius is applied to their parent elements
  // (which means we can't set the background-color for each button without
  // doing a bunch of logic to set their border radii)
}

// component element needs to be position: relative for the selectors to display
.component-selector-wrapper {
  position: relative;
}

// selector outlines
.component-selector {
  border-style: solid;
  border-width: 1px;
  // selector colors are set for the selected component by default,
  // then overridden for the selected-parent. this is so we don't get a
  // visual jump when animating them in
  // (technically the parent DOES jump, but it's a lot less noticible than the
  // selected component. plus, the colors are similar enough that you don't see it)
  border-color: $layout-bg-color;
  // subtle shadow to create more visual distinction between selectors and the
  // stuff behind them
  box-shadow: 1px 1px 20px -11px $black;
  height: calc(100% + #{$offset-height});
  left: -$offset-width-half;
  opacity: 0;
  // because we're just setting opacity to show/hide, don't allow child selectors to be clicked
  // note: selected-parent and selected both set this to `all` so current selectors can be clicked
  pointer-events: none;
  position: absolute;
  top: -$offset-height-half;
  transition: 50ms opacity linear; // fade out quickly
  width: calc(100% + #{$offset-width});
  z-index: -1; // should be less than any element in the component itself
}

.kiln-page-area .component-selector {
  border-color: $page-bg-color;
}

// menus
.component-selector-top,
.component-selector-bottom {
  background: rgba(255, 255, 255, .9); // todo: maybe blur the backgrounds in the future?
  border-color: transparent;
  border-width: 1px;
  border-style: solid;
  border-radius: 10px;
  box-shadow: 1px 1px 20px -9px $black; // even subtler shadow for the menus
  right: $offset-width-half;
  position: absolute;
}

// place the top and bottom menus bisecting the outline vertically
.component-selector-top {
  border-color: $layout-bg-color;
  bottom: calc(100% - #{$offset-height-menu});
}

// bottom menu is more offset, since it concerns actions that don't
// affect the component itself (but rather things around it, e.g. adding new components)
.component-selector-bottom {
  border-color: $layout-bg-color;
  top: calc(100% - #{$offset-height-menu / 2});
}

.kiln-page-area .component-selector-top,
.kiln-page-area .component-selector-bottom {
  border-color: $page-bg-color;
}

// all menus use flex to align their buttons
.component-selector-top,
.component-selector-bottom,
.selected-info,
.selected-actions,
.component-selector-bottom {
  align-items: center;
  display: flex;
  flex-flow: row;
  justify-content: flex-start;
}

// current component label
.selected-label {
  @include label();

  font-size: 14px;
  line-height: $action-icon-small; // same vertical space as the icons
  margin: 0;
  padding: 6px 8px;
  white-space: nowrap;
}

// regular button styles
.selected-label,
.selected-info-parent,
.selected-action-settings,
.selected-action-delete {
  @include selector-icon($layout-color, $action-icon-small);
}

.kiln-page-area .selected-label,
.kiln-page-area .selected-info-parent,
.kiln-page-area .selected-action-settings,
.kiln-page-area .selected-action-delete {
  @include selector-icon($page-color, $action-icon-small);
}

// add button is larger
.selected-add {
  @include selector-icon($layout-color, $action-icon-large);
}
.kiln-page-area .selected-add {
  @include selector-icon($page-color, $action-icon-large);
}

// set a border on parent, settings, and delete
.selected-info-parent,
.selected-action-settings,
.selected-action-delete {
  border-left: 1px solid $layout-bg-color;
}
.kiln-page-area .selected-info-parent,
.kiln-page-area .selected-action-settings,
.kiln-page-area .selected-action-delete {
  border-left: 1px solid $page-bg-color;
}

// selected parent
.component-selector-wrapper.selected-parent > .component-selector {
  // include overrides for outline offset (width only)
  left: -#{$offset-width-half + $parent-offset};
  width: calc(100% + #{$offset-width + $parent-offset * 2});

  // show selector
  opacity: 1;
  pointer-events: all;
  transition: 250ms opacity ease-out; // fade in slower than the current component

  // override colors
  border-color: $layout-parent-bg-color;

  .component-selector-top {
    border-color: $layout-parent-bg-color;
  }

  .selected-label,
  .selected-action-settings {
    @include selector-icon($layout-parent-color, $action-icon-small);
  }

  // set a border on settings instead of its container,
  // because a parent might only have `delete` and we don't want an empty
  // `selected-actions` menu with a border and empty space
  .selected-action-settings {
    border-left: 1px solid $layout-parent-bg-color;
  }

  // hide extraneous buttons
  .selected-info-parent,
  .selected-action-delete,
  .component-selector-bottom {
    display: none;
  }
}

.kiln-page-area .component-selector-wrapper.selected-parent > .component-selector {
  // override colors
  border-color: $page-parent-bg-color;

  .component-selector-top {
    border-color: $page-parent-bg-color;
  }

  .selected-label,
  .selected-action-settings {
    @include selector-icon($page-parent-color, $action-icon-small);
  }

  // set a border on settings instead of its container,
  // because a parent might only have `delete` and we don't want an empty
  // `selected-actions` menu with a border and empty space
  .selected-action-settings {
    border-left: 1px solid $page-parent-bg-color;
  }
}

// selected component
.component-selector-wrapper.selected > .component-selector {
  // show selector
  opacity: 1;
  pointer-events: all;
  transition: 150ms opacity ease-out; // fade relatively quickly
}

// z-index setting
// needs to be:
// 1. selected parent (to appear above other page elements)
// 2. components inside selected parent (so you can click into them)
// 3. selected component (to appear above its siblings)
// 4. components inside selected component (so you can click into them)

.component-selector-wrapper.selected-parent {
  z-index: 1  !important;
}

// parent component: siblings of the selected component need a higher z-index
// than the parent selector, but a lower index than the current selector
.component-selector-wrapper.selected-parent [data-uri] {
  z-index: 2;
}

.component-selector-wrapper.selected {
  z-index: 3 !important;
}

// selected component: components inside the selected component ALSO needs a higher z-index
// so we can click into them when the parent is selected
.component-selector-wrapper.selected [data-uri] {
  z-index: 4;
}

// all editable elements should have some kind of ux showing they can be edited
[data-editable] {
  cursor: pointer;
}

// inner component lists should always be flexed
// (this will display properly if their parents are either flexed OR box)
.component-list-inner {
  display: inherit;
  flex-flow: row wrap;
  flex: 1 1 100%;
}
